/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MulyService } from "../muly.service";
import { MulyCreateInput } from "./MulyCreateInput";
import { Muly } from "./Muly";
import { MulyFindManyArgs } from "./MulyFindManyArgs";
import { MulyWhereUniqueInput } from "./MulyWhereUniqueInput";
import { MulyUpdateInput } from "./MulyUpdateInput";

export class MulyControllerBase {
  constructor(protected readonly service: MulyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Muly })
  async createMuly(@common.Body() data: MulyCreateInput): Promise<Muly> {
    return await this.service.createMuly({
      data: data,
      select: {
        createdAt: true,
        fld1: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Muly] })
  @ApiNestedQuery(MulyFindManyArgs)
  async mulies(@common.Req() request: Request): Promise<Muly[]> {
    const args = plainToClass(MulyFindManyArgs, request.query);
    return this.service.mulies({
      ...args,
      select: {
        createdAt: true,
        fld1: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Muly })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async muly(
    @common.Param() params: MulyWhereUniqueInput
  ): Promise<Muly | null> {
    const result = await this.service.muly({
      where: params,
      select: {
        createdAt: true,
        fld1: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Muly })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMuly(
    @common.Param() params: MulyWhereUniqueInput,
    @common.Body() data: MulyUpdateInput
  ): Promise<Muly | null> {
    try {
      return await this.service.updateMuly({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fld1: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Muly })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMuly(
    @common.Param() params: MulyWhereUniqueInput
  ): Promise<Muly | null> {
    try {
      return await this.service.deleteMuly({
        where: params,
        select: {
          createdAt: true,
          fld1: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
